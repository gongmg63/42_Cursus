version: '3.8'

services:
  postgres:
    build:
      context: ./requirements/postgresql
      dockerfile: Dockerfile
    image: postgres
    container_name: postgres
    restart: always
    init: true
    env_file: .env
    volumes:
      - db:/var/lib/postgresql/data
    # ports:
    #   - "5432"
    networks:
      - intra
    tty: true

  django:
    build:
      context: ./requirements/django
      dockerfile: Dockerfile
    image: django
    container_name: django
    restart: always
    init: true
    env_file: .env
    depends_on:
      - postgres
    volumes:
      - django:/volumes
      - media:/images
    ports:
      - "8000:8000"
    networks:
      - intra
    tty: true

  nginx:
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    image: nginx
    container_name: nginx
    restart: always
    init: true
    env_file: .env
    depends_on:
      - postgres
      - django
    labels:
      co.elastic.logs/module: nginx
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error
    volumes:
      - media:/images
      - frontend:/usr/share/nginx/html
    ports:
      - "443:443"
    networks:
      - intra
    tty: true

  setup:
    # image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    deploy:
      replicas: ${CREATE_SERVICE:-0}
    build:
      context: ./requirements/setup
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: setup
    user: "0"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    init: true
    networks:
      - elk
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    deploy:
        replicas: ${CREATE_SERVICE:-0}
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    restart: always
    # env_file: .env
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
    networks:
      - elk
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    deploy:
      replicas: ${CREATE_SERVICE:-0}
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    # env_file: .env
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
    user: root
    ports:
      - "5044:5044"
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - "./requirements/logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    networks:
      - elk

  kibana:
    deploy:
      replicas: ${CREATE_SERVICE:-0}
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    # env_file: .env
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      # - ./requirements/kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca/ca.crt https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  filebeat:
    deploy:
      replicas: ${CREATE_SERVICE:-0}
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata:/usr/share/filebeat/data
      - "./requirements/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=https://kibana:5601
    networks:
      - elk

volumes:
  db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/requirements/postgresql/volumes'
  django:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/requirements/django/volumes'
  media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/requirements/nginx/media'
  frontend:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: '${PWD}/requirements/nginx/fe'
  certs:
    driver: local
  esdata:
    driver: local
  kibanadata:
    driver: local
  filebeatdata:
    driver: local
  logstashdata:
    driver: local

networks:
  intra:
    driver: bridge
  elk:
    driver: bridge
